{"version":3,"sources":["TodoItem.js","TodoList.js","InputErrors.js","TodoInput.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","props","state","title","initTitle","isEditable","handleDoubleClick","bind","handleBlur","handleChange","handleKeyUp","event","preventDefault","this","setState","target","value","key","onTitleChange","id","setTimeout","blur","className","onDoubleClick","onBlur","onChange","onKeyUp","contentEditable","readOnly","type","onClick","onButtonClick","React","Component","TodoList","items","map","todo","onDeleteTodo","onUpdateTodo","InputErrors","valid","finalClassName","animateIsRun","TodoInput","isValid","handleSubmit","runAnimate","animateIsActive","onCreateTodo","onSubmit","placeholder","App","todos","lastId","createTodo","updateTodo","deleteTodo","prevState","newTodos","item","console","log","filter","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5fd3f24a.chunk.js","sourcesContent":["import React from 'react';\r\nimport './TodoItem.css';\r\n\r\nclass TodoItem extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      title: props.initTitle,\r\n      isEditable: false\r\n    }\r\n\r\n    this.handleDoubleClick = this.handleDoubleClick.bind(this);\r\n    this.handleBlur = this.handleBlur.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleKeyUp = this.handleKeyUp.bind(this);\r\n  }\r\n\r\n  handleDoubleClick(event) {\r\n    event.preventDefault();\r\n    this.setState({isEditable: true});\r\n  }\r\n\r\n  handleBlur() {\r\n    this.setState({\r\n      title: this.props.initTitle,\r\n      isEditable: false\r\n    });\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({title: event.target.value});\r\n  }\r\n\r\n  handleKeyUp(event) {\r\n    if (event.key === 'Enter') {\r\n      event.preventDefault();\r\n      this.props.onTitleChange(this.props.id, this.state.title);\r\n      setTimeout(this.blur, 0);\r\n    }\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <div className=\"TodoItem\">\r\n        <input\r\n          onDoubleClick={this.handleDoubleClick}\r\n          onBlur={this.handleBlur}\r\n          onChange={this.handleChange}\r\n          onKeyUp={this.handleKeyUp}\r\n          contentEditable={this.state.isEditable}\r\n          className=\"TodoItem__title\"\r\n          value={this.state.title}\r\n          readOnly={!this.state.isEditable}\r\n          type=\"text\"\r\n        />\r\n        <button \r\n          onClick={() => this.props.onButtonClick(this.props.id)}\r\n          className=\"TodoItem__delete\"\r\n        >\r\n          x\r\n        </button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TodoItem;","import React from 'react';\r\nimport './TodoList.css';\r\nimport TodoItem from './TodoItem';\r\n\r\nfunction TodoList(props) {\r\n  return (\r\n    <ul className=\"TodoList\">\r\n      {props.items.map((todo) =>\r\n        <li\r\n         key={todo.id}\r\n         className=\"TodoList__item\"\r\n        >\r\n          <TodoItem \r\n            id={todo.id}\r\n            initTitle={todo.title}\r\n            onButtonClick={props.onDeleteTodo}\r\n            onTitleChange={props.onUpdateTodo}\r\n          />\r\n        </li>\r\n        )}\r\n    </ul>\r\n  )\r\n}\r\n\r\nexport default TodoList;","import React from 'react';\r\nimport './InputErrors.css';\r\n\r\nfunction InputErrors(props) {\r\n  if (props.valid) {\r\n    return <p></p>;\r\n  }\r\n  let finalClassName = 'InputErrors';\r\n  if (props.animateIsRun) {\r\n    finalClassName += ' InputErrors--animate-run';\r\n  }\r\n  return <p className={finalClassName}>Error: todo is empty!</p>;\r\n}\r\n\r\nexport default InputErrors;","import React from 'react';\r\nimport './TodoInput.css';\r\nimport InputErrors from './InputErrors.js';\r\n\r\nclass TodoInput extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { \r\n      value: '',\r\n      isValid: true,\r\n      animateIsRun: false\r\n    };\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.runAnimate = this.runAnimate.bind(this);\r\n  }\r\n\r\n  handleChange(event) {\r\n    if (event.target.value == ' ') {\r\n      return;\r\n    } \r\n    this.setState({ \r\n      value: event.target.value,\r\n      isValid: true,\r\n      animateIsActive: false\r\n    });\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    if (this.state.value !== '') {\r\n      this.props.onCreateTodo(this.state.value);\r\n      this.setState({ \r\n        value: '',\r\n        isValid: true\r\n      });  \r\n    } else {\r\n      this.setState({\r\n        isValid: false,\r\n        animateIsRun: false\r\n      });\r\n      setTimeout(this.runAnimate, 0);\r\n    }\r\n    event.preventDefault();\r\n  }\r\n\r\n  runAnimate() {\r\n    this.setState({animateIsRun: true});\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <form\r\n        onSubmit={this.handleSubmit}\r\n        className=\"TodoInput\"\r\n      >\r\n        <InputErrors valid={this.state.isValid} animateIsRun={this.state.animateIsRun} />\r\n        <input \r\n          type=\"text\" \r\n          placeholder=\"enter new todo\"\r\n          value={this.state.value} \r\n          onChange={this.handleChange} \r\n          className=\"TodoInput__item\"\r\n        />\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoInput;","import React from 'react';\r\nimport './App.css';\r\n\r\nimport TodoList from './TodoList';\r\nimport TodoInput from './TodoInput';\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = { \r\n      todos: [],\r\n      lastId: 0\r\n    }\r\n\r\n    this.createTodo = this.createTodo.bind(this);\r\n    this.updateTodo = this.updateTodo.bind(this);\r\n    this.deleteTodo = this.deleteTodo.bind(this);\r\n  }\r\n\r\n  createTodo(title) {\r\n    this.setState((prevState => ({\r\n      todos: [\r\n        {id: prevState.lastId, title: title}, ...prevState.todos\r\n      ],\r\n      lastId: prevState.lastId + 1\r\n    })));\r\n  }\r\n\r\n  updateTodo(id, title) {\r\n    const newTodos = this.state.todos.map(item => {\r\n      if (item.id === id) {\r\n        return {id: id, title: title}\r\n      }\r\n      return item;\r\n    });\r\n    this.setState({todos: newTodos});\r\n  }\r\n\r\n  deleteTodo(id) {\r\n    console.log('delete todo');\r\n    const newTodos = this.state.todos.filter(item => item.id !== id);\r\n    this.setState({ todos: newTodos });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App__header\">Todo App</header>\r\n        <div className=\"App__inner\">\r\n          <TodoInput onCreateTodo={this.createTodo} />\r\n          <TodoList \r\n            items={this.state.todos} \r\n            onUpdateTodo={this.updateTodo}\r\n            onDeleteTodo={this.deleteTodo} \r\n          />\r\n        </div>      \r\n        <footer className=\"App__footer\">Created by Bogdan Dor</footer>\r\n      </div>\r\n    );  \r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}